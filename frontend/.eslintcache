[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/App.js":"2","/usr/src/app/src/reportWebVitals.js":"3","/usr/src/app/src/credentials/Index.js":"4","/usr/src/app/src/credentials/hooks.js":"5","/usr/src/app/src/common.js":"6","/usr/src/app/src/browse/List.js":"7","/usr/src/app/src/browse/BrowseBucket.js":"8"},{"size":583,"mtime":1607839361045,"results":"9","hashOfConfig":"10"},{"size":1142,"mtime":1607840111800,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1607724591341,"results":"12","hashOfConfig":"10"},{"size":1352,"mtime":1607731714687,"results":"13","hashOfConfig":"10"},{"size":308,"mtime":1607726755399,"results":"14","hashOfConfig":"10"},{"size":979,"mtime":1607836363480,"results":"15","hashOfConfig":"10"},{"size":618,"mtime":1607837226968,"results":"16","hashOfConfig":"10"},{"size":4223,"mtime":1607839489910,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vcujcu",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/usr/src/app/src/index.js",[],["36","37"],"/usr/src/app/src/App.js",[],"/usr/src/app/src/reportWebVitals.js",[],"/usr/src/app/src/credentials/Index.js",[],"/usr/src/app/src/credentials/hooks.js",[],"/usr/src/app/src/common.js",[],"/usr/src/app/src/browse/List.js",[],"/usr/src/app/src/browse/BrowseBucket.js",["38"],"import React, { useEffect, useState } from \"react\";\nimport { get, getStream } from './../common'\nimport { Link, useParams } from \"react-router-dom\";\n\n \nexport function BrowseBucket(props) {\n  const { bucketName: bucketNameProps, prefixes:currentPrefixesProps } = useParams()\n  const [contents, setContents] = useState([]);\n  const [prefixes, setPrefixes] = useState([]);\n  const [currentPrefixes, setCurrentPrefixes] = useState(currentPrefixesProps || '');\n  const [bucketName, ] = useState(bucketNameProps);\n\n  const fetchContent = () => {\n    let prefixesUri = currentPrefixes?.split('/').join('|')\n    prefixesUri = prefixesUri ? '/' + prefixesUri : ''\n    get(`/s3/${bucketName}${prefixesUri}`).then((res) => {\n      setContents(res.contents)\n      setPrefixes(res.prefixes)\n    })\n  }\n\n  useEffect(() => {\n    fetchContent()\n  }, [props.bucketName, currentPrefixes, props.prefixes])\n\n\n  const backLink = <BackLink onClick={(evt) => removeLastPrefix()} currentPrefixes={currentPrefixes} bucketName={bucketName}/>\n\n  return (<div>\n    <BrowseBucketHeader bucketName={bucketName} currentPrefixes={currentPrefixes} itemCount={contents.length} onCurrentPrefixChange={(prefixes) => setCurrentPrefixes(prefixes)}/>\n    <table>\n      <tr>\n        <th>Key</th>\n        <th>Last Update</th>\n        <th>Size</th>\n      </tr>\n\n      {backLink ? \n      <tr>\n          <td>{backLink}</td>\n          <td></td>\n          <td></td>\n      </tr> : ''}\n\n\n        {prefixes.map((prefix) => (\n          <tr>\n          <td><PrefixLink bucketName={bucketName} prefix={prefix} currentPrefixes={currentPrefixes} onClick={(evt) => { addPrefix(prefix)}}/></td>\n          <td></td>\n          <td></td>\n        </tr>          \n        ))}\n\n        {contents.map((row) => (\n          <tr>\n            <td><DownloadLink bucketName={bucketName} objectKey={row.key} friendlyName={row.friendlyName} /></td>\n            <td>{row.lastUpdate}</td>\n            <td>{row.size}</td>\n          </tr>\n        ))}\n    </table>\n    </div>\n  );\n\n\n  function removeLastPrefix() {\n    const prefixes = currentPrefixes.split('|')\n    setCurrentPrefixes(prefixes.slice(0, -1).filter(s => s.length).join('|'))\n  }  \n\n  function addPrefix(prefix) {\n    const prefixes = currentPrefixes.split('|')\n    prefixes.push(prefix.replace(/\\//g, ''))\n    setCurrentPrefixes(prefixes.filter(s => s.length).join('|'))\n  }\n}\n\nfunction DownloadLink(props) {\n  function download() {\n    const path = ['', 's3', encodeURIComponent(props.bucketName), encodeURIComponent(props.objectKey), 'download'].join('/')\n    getStream(path).then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = props.friendlyName;\n      a.click();\n    });\n  }\n\n  return (<button onClick={download}>{props.friendlyName}</button>)\n}\n\nfunction BackLink(props) {\n  const { bucketName, currentPrefixes } = props\n  let prefixes = currentPrefixes ? currentPrefixes.split('|') : []\n\n  if (prefixes.length === 0) return false\n\n  prefixes = prefixes.slice(0, -1).join('|')\n  \n  const uri = '/browse/' + bucketName + '/' + (prefixes ? prefixes : '')\n  return <Link to={uri} onClick={props.onClick}>..</Link>\n}\n\nfunction PrefixLink(props) {\n  const { bucketName, currentPrefixes, prefix } = props\n  const newPrefixes = currentPrefixes ? currentPrefixes.split('|') : []\n  newPrefixes.push(prefix)\n\n  const uri = '/browse/' + bucketName + '/' + (currentPrefixes ? currentPrefixes + '|' : '') + (prefix.length ? prefix : '')\n  return <Link to={uri} onClick={props.onClick}>{(prefix.length ? prefix : '..')}</Link>\n}\n\nexport function BrowseBucketHeader(props) {\n  const {bucketName, itemCount} = props\n  const prefixes = props.currentPrefixes.split('|')\n\n  const prefixPath = prefixes.map((v, i, arr) => {\n    return arr.filter((_v, _i) => _i <= i)\n  }).map((c) => {\n    const prefixes = c.join('|')\n    return {\n      link: ['', 'browse', bucketName, prefixes].join('/'), text: c.slice(-1).pop(), prefixes\n    }\n  }).map((c) => {\n    return (<span><Link to={c.link} onClick={() => {props.onCurrentPrefixChange(c.prefixes)}}>{c.text}</Link> &gt; </span>)\n  })\n\nreturn (<div> {bucketName} {prefixPath} ({itemCount} items)</div>)\n\n}\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":24,"column":6,"nodeType":"45","endLine":24,"endColumn":57,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchContent'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [props.bucketName, currentPrefixes, props.prefixes, fetchContent]",{"range":"52","text":"53"},[835,886],"[props.bucketName, currentPrefixes, props.prefixes, fetchContent]"]